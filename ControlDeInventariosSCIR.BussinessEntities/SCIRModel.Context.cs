//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ControlDeInventariosSCIR.BussinessEntities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SCIR_SistemaInventarioEntities : DbContext
    {
        public SCIR_SistemaInventarioEntities()
            : base("name=SCIR_SistemaInventarioEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<c_compra> c_compra { get; set; }
        public DbSet<c_dtl_compra_detalle> c_dtl_compra_detalle { get; set; }
        public DbSet<carg_cargoInventario> carg_cargoInventario { get; set; }
        public DbSet<ce_comidaEmpleado> ce_comidaEmpleado { get; set; }
        public DbSet<ce_dtl_comidaEmpleado_detalle> ce_dtl_comidaEmpleado_detalle { get; set; }
        public DbSet<d_desecho> d_desecho { get; set; }
        public DbSet<dc_desechoCompleto> dc_desechoCompleto { get; set; }
        public DbSet<deg_degustacion> deg_degustacion { get; set; }
        public DbSet<deg_dtl_degustacion_detalle> deg_dtl_degustacion_detalle { get; set; }
        public DbSet<desc_descargoInventario> desc_descargoInventario { get; set; }
        public DbSet<di_desechoIncompleto> di_desechoIncompleto { get; set; }
        public DbSet<i_inventario> i_inventario { get; set; }
        public DbSet<ii_inventarioInterno> ii_inventarioInterno { get; set; }
        public DbSet<ir_inventarioReal> ir_inventarioReal { get; set; }
        public DbSet<mp_materiaPrima> mp_materiaPrima { get; set; }
        public DbSet<ope_operacion> ope_operacion { get; set; }
        public DbSet<p_producto> p_producto { get; set; }
        public DbSet<pant_pantallas> pant_pantallas { get; set; }
        public DbSet<pc_productoCombo> pc_productoCombo { get; set; }
        public DbSet<per_premisosXrol> per_premisosXrol { get; set; }
        public DbSet<pmx_dtl_productMix_detalle> pmx_dtl_productMix_detalle { get; set; }
        public DbSet<pmx_productMix> pmx_productMix { get; set; }
        public DbSet<ps_productoSimple> ps_productoSimple { get; set; }
        public DbSet<r_dtl_recetaDetalle> r_dtl_recetaDetalle { get; set; }
        public DbSet<r_receta> r_receta { get; set; }
        public DbSet<rol_roles> rol_roles { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<t_transferencia> t_transferencia { get; set; }
        public DbSet<te_transferenciaEntrada> te_transferenciaEntrada { get; set; }
        public DbSet<tid_tipoDesecho> tid_tipoDesecho { get; set; }
        public DbSet<tir_tipoReceta> tir_tipoReceta { get; set; }
        public DbSet<tope_tipoOperacion> tope_tipoOperacion { get; set; }
        public DbSet<ts_transferenciaSalida> ts_transferenciaSalida { get; set; }
        public DbSet<usr_usuarios> usr_usuarios { get; set; }
        public DbSet<vin_variacionInventario> vin_variacionInventario { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
